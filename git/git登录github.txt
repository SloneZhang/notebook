要在Git中登录GitHub账号，您需要设置Git的全局用户名和电子邮件地址，并生成一个访问令牌用于与GitHub通信。以下是具体步骤：

设置Git的用户名和邮箱：

git config --global user.name "您的GitHub用户名"
git config --global user.email "您的GitHub邮箱"

访问 GitHub - Settings - Developer settings - Personal access tokens 页面生成一个新的访问令牌。

在Git命令行中使用访问令牌：

git config --global credential.helper store
# 当下次访问GitHub时，它会要求输入用户名和密码，此时您应输入您的GitHub用户名和刚才生成的访问令牌。

或者，您可以使用Git的credential helper来存储访问令牌：

git config --global credential.helper cache  # 使用缓存，默认15分钟
# 或者
git config --global credential.helper 'cache --timeout=3600'  # 自定义超时时间，例如一小时（3600秒）

从此以后，当您访问GitHub时，Git会提示您输入用户名和密码，此时您应该输入您的GitHub用户名和刚才生成的个人访问令牌。

请确保您的GitHub账户和访问令牌安全，避免泄露。





PSPSPSPSPSPS::::::这一段是本地生成ssh公钥并上传，有github方进行验证

1. SSH 配置
要想本地与远程仓库交互，必须有一个安全机制防止数据泄漏，这个安全机制就是 SSH，因此远程交互之前需要进行 SSH 配置。
1.1 生成 SSH key

想要生成 SSH KEY 需要先安装 SSH，不过我们之前已经安装的 GitBash 自带 SSH（我的操作系统是 Windows 10）

打开 GitBash ，输入 ssh，如果返回如下界面说明 SSH 已安装，否则得自己安装呀！


紧接着输入 ssh-keygen -t rsa （指定 rsa 算法生成密钥），接着连续三个回
车键（不需要输入密码），然后就会生成两个文件 id_rsa （密钥）和 id_rsa.pub （公钥）。

我划线的地方就是密钥和公钥存储的位置，等会儿我们需要打开文件复制密钥。


1.2 添加 SSH key

接下来要做的是把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 GitHub 上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码。

打开 GitHub，点击右上角的你的头像，点击设置 settings：


点击左侧的SSH and GPG keys，点击右上角的New SSH key：


进入到下面的界面，把刚刚生成的公钥 （id_rsa.pub 文件中的内容）复制到 Key 所在框， Title 不用填，复制好点击下方的 Add SSH key 按钮即可。

提示：id_rsa.pub 可以选择用 Notepad++ 或 Sublime 打开~


添加完返回 SSH 页面就会出现你的本地信息，如下图所示：


1.3 验证绑定

最后我们验证一下本地的 git 与 GitHub 是否绑定成功，在 GitBash 输入ssh -Tgit@github.com，如果返回下面的提示，说明绑定成功，不过有时候返回有些慢呀


到此为止，我们的 SSH 配置完成，接下来我们可以与远程仓库交互啦！